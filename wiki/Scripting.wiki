#summary Script language in Zildo

<wiki:toc max_depth="4" />


= Model Description =

The scripting module in Zildo is divided into two essentials sections :
 * scenes
 * quests

== Main elements ==

All is described in a single XML file, containing an ADVENTURE root.

But let's see how works the 2 sections.

=== Scenes ===

A scene is a cinematic sequence, where player can't act. He just has to show events happening like in a movie.

Basically, it's a list of mini-actions which are launched sequentially. Some can be launched simultaneously. (see the 'Misc' section)

=== Quests ===

A quest is an objective for the player. It has 3 parts:
 * *trigger* : what the player has to do in order to accomplish the quest
 * *action* : direct actions from the accomplishment
 * *history* : consequences in the history (map replacements ...)

A quest has a name and a state during the game, which can be 'done' or 'undone'.

_Note_ : when loading a saved game, every accomplished quest launches the execution of each 'history' part, but not 'action' part.

== Trigger & Action ==

=== Trigger ===

A trigger can be of 4 different kinds : (corresponding to [http://code.google.com/p/zildo/source/browse/trunk/zildo/src/zildo/monde/quest/QuestEvent.java QuestEvent] )

 * location : when a character reach a given location
 * dialog : when a specific character say a given sentence
 * inventory : does Zildo have a given item ?
 * questDone : has Zildo achieved a given quest ?

=== Action ===

Every action is a parametered command. Here is an exhaustive list of all existing actions :

|| *Command* || *Type* || *Who* || *What* || *Unblock* || *Meaning* ||
|| pos || position || V || V || - || Set character or camera's location ||
|| moveTo || position || V || V || V || Move character or camera's location, progressively ||
|| speak || text || V || V || V || Launch a dialog ||
|| script || int || V || - || - || Set character's script ||
|| angle || int || V || - || - || Set character's angle ||
|| wait || int || - || - || V || Wait for a given number of frame ||
|| sound || text || V || V || V || Play a given sound ||
|| music || text || V || V || V || Play a given music||
|| fadeIn || int || - || - || V || Start a fade in, with given effect ||
|| fadeOut || int || - || - || V || Start a fade out, with given effect ||
|| map || text || - || - || - || Load the given map ||
|| focus || text || V || - || - || Focus on given character (if delta is TRUE, camera moves smoothly) ||
|| spawn || text || V || V || - || Spawn a new character/sprite ||
|| exec || text || - || - || - || Execute a named script ||
|| take || text || V || V || - || A character (Zildo for example) takes an object ||
|| mapReplace || text || - || V || - || Replace map indicated by 'what' by the one named by 'name'  ||
|| animation || text || - || - || - || Spawn an animation from the enum [http://code.google.com/p/zildo/source/browse/trunk/zildo/src/zildo/monde/sprites/desc/SpriteAnimation.java SpriteAnimation] ||
|| impact || text || - || - || - || Spawn an animation from the enum [http://code.google.com/p/zildo/source/browse/trunk/zildo/src/zildo/monde/sprites/elements/ElementImpact.java ImpactKind] ||
|| remove || text || V || V || - || Remove an element (what) or a character (who) from the current map ||
|| markQuest || text || - || - || - || Accomplish/reset a quest identified by 'name' attribute, according to the 'value' attribute (0=cancel / 1=accomplish) ||
|| putDown || text || - || - || - || Remove an item from Zildo's inventory ||
|| attack || text || V || - || - || Make a given character attacking in front of him ||
|| activate || text || - || V || V || Activate a gear (door, button, ...) with boolean 'value' to turn on/off the gear (according to TRUE/FALSE value) ||

=== Misc===

Here is some details for particular commands.

Basically, each command is launched when the previous one is finished.
But, there's two possibilities to avoid this kind of mechanic.

==== actions ====

Into the command 'actions', you can add a sublist of actions. It means that each one should happen in the same time.

It's useful when two people have to walk in the same direction, or when the camera should follow a character and so on.

==== unblock ====

With the attribute 'unblock', the given command is said to be unblocking. It means that next action can start without waiting for the current one.

= Class modelization =

Here is a class model representation :

[http://lh6.googleusercontent.com/-_0tQGqmH-aA/T2iAgkvDvmI/AAAAAAAABpI/qd8MEWq5p5I/w1420-h284-k/scriptclasses.PNG]

We can see that [http://code.google.com/p/zildo/source/browse/trunk/zildo/src/zildo/server/state/ScriptManagement.java ScriptManagement] handle all the stuff related to script (as PersoManagement, MapManagement in its respective fields). It has two main linked objects :

 * *AdventureElement* : a representation of all game scripts (see quests.xml), containing the model described in the start of this document. Note that this object is dynamic, and is the mirror of the instant game situation (issued from a savegame for example). It's not a finished state.
 * *ScriptExecutor* : an object dealing with current executing scripts (if any).