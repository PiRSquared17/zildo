#summary Memory optimization

= Goal of this document =

With the development of the Android port of Zildo, memory became a crucial consideration. Especially when ADB runner responds by a `OutOfMemoryException` !

So in this document, we will try to reduce the memory usage in order to be accepted by an Android device, which is around 8Mb (on mine, which is my first objective).

= Inventory of fixtures =

Let's try to evaluate memory allocated by the game. In this study, we'll focus on NIO buffers allocated via Sprite and Tile engines, respectively [http://code.google.com/p/zildo/source/browse/trunk/zildo/src/zildo/fwk/gfx/engine/SpriteEngine.java SpriteEngine] and [http://code.google.com/p/zildo/source/browse/trunk/zildo/src/zildo/fwk/gfx/engine/TileEngine.java TileEngine]. Following is a description of what we have in 1.095 (aka Episode 1).

There is 9 tile banks, and 6 sprite banks. Each one is carrying a VBOBuffers, itself having 4 buffers :
 * vertices ( *float* ) sized by 3 x _numPoints_
 * textures ( *float* ) sized by 2 x _numPoints_
 * indices ( *int* ) sized by 3 x _maxIndices_
 * normals ( *float* ) sized by 2 x _numFaces_

The two variables are defined like this ( multiplied by 2 because we consider 2 maps at a time) :
 * _numPoints_ is 2 x 4 x 64 x 64 : 4 vertices per tile
 * _maxIndices_ is 2 x 6 x 64 x 64 : 6 indices per tile
 * _numFaces_ is _maxIndices_ / 3

Let's calculate the size of each buffer :
 * vertices : 3 x _numPoints_ x 4 = 3 x 32768 x 4 = 393 216
 * textures : 2 x _numPoints_ x 4 = 2 x 32768 x 4 = 262 144
 * indices : 3 x _maxIndices_ x 4 = 3 x 49152 x 4 = 589 824
 * normals : 3 x _numFaces_ x 4 = 3 x 8192 x 4= 98 304

So the total size is this multiplied by 15 (total number of banks) = *20 152 320* bytes.

It's OK for every platforms adressed by LWJGL, but too much for a smartphone. So let's see how we can do better.

= Reduction =

Due to some mistakes or forgotten ideas, there's some immediate enhancement we can make, to gain some Mb.

== Easy : immediate cut ==

There's two things we can do easily, without risking any danger.

=== 1) remove normals ===

Normals aren't used now. It was planned to put lights around torch, one day, but this isn't done yet. So there's no harm with this removal.

=== 2) reduce precision for indexes ===

Index buffer manipulates numbers between 0 and a maximum calculated like this : 64 x 64 x 4 = 16384.

So we doesn't need a IntBuffer : a ShortBuffer is enough.

=== 3) reuse index buffers ===

Since all tile primitives draw tiles at the same places, with a similar index buffers, we could allocate just one, and reuse it for all primitive.

Instead of 15 buffers, we would have only 1.

=== Total ===

So we have a delta of :

-98 304 * 15 ( _normals removal_ )

- 589 824 * 16 ( _all index buffers removal_ )

+ 3 * 49152 * 2 ( _only one index buffer with ShortBuffer_ )

= 10 616 832 Mb